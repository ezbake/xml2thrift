/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package ezbake.thrift.utils.xml2thrift.test.wikipedia;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Revision implements org.apache.thrift.TBase<Revision, Revision._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Revision");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PARENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FORMAT_FIELD_DESC = new org.apache.thrift.protocol.TField("format", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MINOR_FIELD_DESC = new org.apache.thrift.protocol.TField("minor", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SHA1_FIELD_DESC = new org.apache.thrift.protocol.TField("sha1", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MODEL_FIELD_DESC = new org.apache.thrift.protocol.TField("model", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CONTRIBUTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("contributor", org.apache.thrift.protocol.TType.STRUCT, (short)10);

  public String id;
  public String parentId;
  public String timestamp;
  public String format;
  public String minor;
  public String comment;
  public String text;
  public String sha1;
  public String model;
  public Contributor contributor;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PARENT_ID((short)2, "parentId"),
    TIMESTAMP((short)3, "timestamp"),
    FORMAT((short)4, "format"),
    MINOR((short)5, "minor"),
    COMMENT((short)6, "comment"),
    TEXT((short)7, "text"),
    SHA1((short)8, "sha1"),
    MODEL((short)9, "model"),
    CONTRIBUTOR((short)10, "contributor");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PARENT_ID
          return PARENT_ID;
        case 3: // TIMESTAMP
          return TIMESTAMP;
        case 4: // FORMAT
          return FORMAT;
        case 5: // MINOR
          return MINOR;
        case 6: // COMMENT
          return COMMENT;
        case 7: // TEXT
          return TEXT;
        case 8: // SHA1
          return SHA1;
        case 9: // MODEL
          return MODEL;
        case 10: // CONTRIBUTOR
          return CONTRIBUTOR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_ID, new org.apache.thrift.meta_data.FieldMetaData("parentId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORMAT, new org.apache.thrift.meta_data.FieldMetaData("format", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MINOR, new org.apache.thrift.meta_data.FieldMetaData("minor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHA1, new org.apache.thrift.meta_data.FieldMetaData("sha1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL, new org.apache.thrift.meta_data.FieldMetaData("model", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRIBUTOR, new org.apache.thrift.meta_data.FieldMetaData("contributor", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Contributor.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Revision.class, metaDataMap);
  }

  public Revision() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Revision(Revision other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetParentId()) {
      this.parentId = other.parentId;
    }
    if (other.isSetTimestamp()) {
      this.timestamp = other.timestamp;
    }
    if (other.isSetFormat()) {
      this.format = other.format;
    }
    if (other.isSetMinor()) {
      this.minor = other.minor;
    }
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
    if (other.isSetText()) {
      this.text = other.text;
    }
    if (other.isSetSha1()) {
      this.sha1 = other.sha1;
    }
    if (other.isSetModel()) {
      this.model = other.model;
    }
    if (other.isSetContributor()) {
      this.contributor = new Contributor(other.contributor);
    }
  }

  public Revision deepCopy() {
    return new Revision(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.parentId = null;
    this.timestamp = null;
    this.format = null;
    this.minor = null;
    this.comment = null;
    this.text = null;
    this.sha1 = null;
    this.model = null;
    this.contributor = null;
  }

  public String getId() {
    return this.id;
  }

  public Revision setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getParentId() {
    return this.parentId;
  }

  public Revision setParentId(String parentId) {
    this.parentId = parentId;
    return this;
  }

  public void unsetParentId() {
    this.parentId = null;
  }

  /** Returns true if field parentId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentId() {
    return this.parentId != null;
  }

  public void setParentIdIsSet(boolean value) {
    if (!value) {
      this.parentId = null;
    }
  }

  public String getTimestamp() {
    return this.timestamp;
  }

  public Revision setTimestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  public void unsetTimestamp() {
    this.timestamp = null;
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return this.timestamp != null;
  }

  public void setTimestampIsSet(boolean value) {
    if (!value) {
      this.timestamp = null;
    }
  }

  public String getFormat() {
    return this.format;
  }

  public Revision setFormat(String format) {
    this.format = format;
    return this;
  }

  public void unsetFormat() {
    this.format = null;
  }

  /** Returns true if field format is set (has been assigned a value) and false otherwise */
  public boolean isSetFormat() {
    return this.format != null;
  }

  public void setFormatIsSet(boolean value) {
    if (!value) {
      this.format = null;
    }
  }

  public String getMinor() {
    return this.minor;
  }

  public Revision setMinor(String minor) {
    this.minor = minor;
    return this;
  }

  public void unsetMinor() {
    this.minor = null;
  }

  /** Returns true if field minor is set (has been assigned a value) and false otherwise */
  public boolean isSetMinor() {
    return this.minor != null;
  }

  public void setMinorIsSet(boolean value) {
    if (!value) {
      this.minor = null;
    }
  }

  public String getComment() {
    return this.comment;
  }

  public Revision setComment(String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public String getText() {
    return this.text;
  }

  public Revision setText(String text) {
    this.text = text;
    return this;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  public String getSha1() {
    return this.sha1;
  }

  public Revision setSha1(String sha1) {
    this.sha1 = sha1;
    return this;
  }

  public void unsetSha1() {
    this.sha1 = null;
  }

  /** Returns true if field sha1 is set (has been assigned a value) and false otherwise */
  public boolean isSetSha1() {
    return this.sha1 != null;
  }

  public void setSha1IsSet(boolean value) {
    if (!value) {
      this.sha1 = null;
    }
  }

  public String getModel() {
    return this.model;
  }

  public Revision setModel(String model) {
    this.model = model;
    return this;
  }

  public void unsetModel() {
    this.model = null;
  }

  /** Returns true if field model is set (has been assigned a value) and false otherwise */
  public boolean isSetModel() {
    return this.model != null;
  }

  public void setModelIsSet(boolean value) {
    if (!value) {
      this.model = null;
    }
  }

  public Contributor getContributor() {
    return this.contributor;
  }

  public Revision setContributor(Contributor contributor) {
    this.contributor = contributor;
    return this;
  }

  public void unsetContributor() {
    this.contributor = null;
  }

  /** Returns true if field contributor is set (has been assigned a value) and false otherwise */
  public boolean isSetContributor() {
    return this.contributor != null;
  }

  public void setContributorIsSet(boolean value) {
    if (!value) {
      this.contributor = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case PARENT_ID:
      if (value == null) {
        unsetParentId();
      } else {
        setParentId((String)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((String)value);
      }
      break;

    case FORMAT:
      if (value == null) {
        unsetFormat();
      } else {
        setFormat((String)value);
      }
      break;

    case MINOR:
      if (value == null) {
        unsetMinor();
      } else {
        setMinor((String)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    case TEXT:
      if (value == null) {
        unsetText();
      } else {
        setText((String)value);
      }
      break;

    case SHA1:
      if (value == null) {
        unsetSha1();
      } else {
        setSha1((String)value);
      }
      break;

    case MODEL:
      if (value == null) {
        unsetModel();
      } else {
        setModel((String)value);
      }
      break;

    case CONTRIBUTOR:
      if (value == null) {
        unsetContributor();
      } else {
        setContributor((Contributor)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PARENT_ID:
      return getParentId();

    case TIMESTAMP:
      return getTimestamp();

    case FORMAT:
      return getFormat();

    case MINOR:
      return getMinor();

    case COMMENT:
      return getComment();

    case TEXT:
      return getText();

    case SHA1:
      return getSha1();

    case MODEL:
      return getModel();

    case CONTRIBUTOR:
      return getContributor();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PARENT_ID:
      return isSetParentId();
    case TIMESTAMP:
      return isSetTimestamp();
    case FORMAT:
      return isSetFormat();
    case MINOR:
      return isSetMinor();
    case COMMENT:
      return isSetComment();
    case TEXT:
      return isSetText();
    case SHA1:
      return isSetSha1();
    case MODEL:
      return isSetModel();
    case CONTRIBUTOR:
      return isSetContributor();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Revision)
      return this.equals((Revision)that);
    return false;
  }

  public boolean equals(Revision that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_parentId = true && this.isSetParentId();
    boolean that_present_parentId = true && that.isSetParentId();
    if (this_present_parentId || that_present_parentId) {
      if (!(this_present_parentId && that_present_parentId))
        return false;
      if (!this.parentId.equals(that.parentId))
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (!this.timestamp.equals(that.timestamp))
        return false;
    }

    boolean this_present_format = true && this.isSetFormat();
    boolean that_present_format = true && that.isSetFormat();
    if (this_present_format || that_present_format) {
      if (!(this_present_format && that_present_format))
        return false;
      if (!this.format.equals(that.format))
        return false;
    }

    boolean this_present_minor = true && this.isSetMinor();
    boolean that_present_minor = true && that.isSetMinor();
    if (this_present_minor || that_present_minor) {
      if (!(this_present_minor && that_present_minor))
        return false;
      if (!this.minor.equals(that.minor))
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    boolean this_present_sha1 = true && this.isSetSha1();
    boolean that_present_sha1 = true && that.isSetSha1();
    if (this_present_sha1 || that_present_sha1) {
      if (!(this_present_sha1 && that_present_sha1))
        return false;
      if (!this.sha1.equals(that.sha1))
        return false;
    }

    boolean this_present_model = true && this.isSetModel();
    boolean that_present_model = true && that.isSetModel();
    if (this_present_model || that_present_model) {
      if (!(this_present_model && that_present_model))
        return false;
      if (!this.model.equals(that.model))
        return false;
    }

    boolean this_present_contributor = true && this.isSetContributor();
    boolean that_present_contributor = true && that.isSetContributor();
    if (this_present_contributor || that_present_contributor) {
      if (!(this_present_contributor && that_present_contributor))
        return false;
      if (!this.contributor.equals(that.contributor))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Revision other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Revision typedOther = (Revision)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentId()).compareTo(typedOther.isSetParentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentId, typedOther.parentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(typedOther.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, typedOther.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFormat()).compareTo(typedOther.isSetFormat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.format, typedOther.format);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinor()).compareTo(typedOther.isSetMinor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minor, typedOther.minor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(typedOther.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, typedOther.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetText()).compareTo(typedOther.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.text, typedOther.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSha1()).compareTo(typedOther.isSetSha1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSha1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sha1, typedOther.sha1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModel()).compareTo(typedOther.isSetModel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.model, typedOther.model);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContributor()).compareTo(typedOther.isSetContributor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContributor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contributor, typedOther.contributor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.id = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PARENT_ID
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.parentId = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TIMESTAMP
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.timestamp = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // FORMAT
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.format = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // MINOR
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.minor = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // COMMENT
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.comment = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // TEXT
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.text = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // SHA1
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.sha1 = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // MODEL
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.model = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // CONTRIBUTOR
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.contributor = new Contributor();
            this.contributor.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.id != null) {
      if (isSetId()) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(this.id);
        oprot.writeFieldEnd();
      }
    }
    if (this.parentId != null) {
      if (isSetParentId()) {
        oprot.writeFieldBegin(PARENT_ID_FIELD_DESC);
        oprot.writeString(this.parentId);
        oprot.writeFieldEnd();
      }
    }
    if (this.timestamp != null) {
      if (isSetTimestamp()) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeString(this.timestamp);
        oprot.writeFieldEnd();
      }
    }
    if (this.format != null) {
      if (isSetFormat()) {
        oprot.writeFieldBegin(FORMAT_FIELD_DESC);
        oprot.writeString(this.format);
        oprot.writeFieldEnd();
      }
    }
    if (this.minor != null) {
      if (isSetMinor()) {
        oprot.writeFieldBegin(MINOR_FIELD_DESC);
        oprot.writeString(this.minor);
        oprot.writeFieldEnd();
      }
    }
    if (this.comment != null) {
      if (isSetComment()) {
        oprot.writeFieldBegin(COMMENT_FIELD_DESC);
        oprot.writeString(this.comment);
        oprot.writeFieldEnd();
      }
    }
    if (this.text != null) {
      if (isSetText()) {
        oprot.writeFieldBegin(TEXT_FIELD_DESC);
        oprot.writeString(this.text);
        oprot.writeFieldEnd();
      }
    }
    if (this.sha1 != null) {
      if (isSetSha1()) {
        oprot.writeFieldBegin(SHA1_FIELD_DESC);
        oprot.writeString(this.sha1);
        oprot.writeFieldEnd();
      }
    }
    if (this.model != null) {
      if (isSetModel()) {
        oprot.writeFieldBegin(MODEL_FIELD_DESC);
        oprot.writeString(this.model);
        oprot.writeFieldEnd();
      }
    }
    if (this.contributor != null) {
      if (isSetContributor()) {
        oprot.writeFieldBegin(CONTRIBUTOR_FIELD_DESC);
        this.contributor.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Revision(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetParentId()) {
      if (!first) sb.append(", ");
      sb.append("parentId:");
      if (this.parentId == null) {
        sb.append("null");
      } else {
        sb.append(this.parentId);
      }
      first = false;
    }
    if (isSetTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      if (this.timestamp == null) {
        sb.append("null");
      } else {
        sb.append(this.timestamp);
      }
      first = false;
    }
    if (isSetFormat()) {
      if (!first) sb.append(", ");
      sb.append("format:");
      if (this.format == null) {
        sb.append("null");
      } else {
        sb.append(this.format);
      }
      first = false;
    }
    if (isSetMinor()) {
      if (!first) sb.append(", ");
      sb.append("minor:");
      if (this.minor == null) {
        sb.append("null");
      } else {
        sb.append(this.minor);
      }
      first = false;
    }
    if (isSetComment()) {
      if (!first) sb.append(", ");
      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
    }
    if (isSetText()) {
      if (!first) sb.append(", ");
      sb.append("text:");
      if (this.text == null) {
        sb.append("null");
      } else {
        sb.append(this.text);
      }
      first = false;
    }
    if (isSetSha1()) {
      if (!first) sb.append(", ");
      sb.append("sha1:");
      if (this.sha1 == null) {
        sb.append("null");
      } else {
        sb.append(this.sha1);
      }
      first = false;
    }
    if (isSetModel()) {
      if (!first) sb.append(", ");
      sb.append("model:");
      if (this.model == null) {
        sb.append("null");
      } else {
        sb.append(this.model);
      }
      first = false;
    }
    if (isSetContributor()) {
      if (!first) sb.append(", ");
      sb.append("contributor:");
      if (this.contributor == null) {
        sb.append("null");
      } else {
        sb.append(this.contributor);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

